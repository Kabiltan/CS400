// --== CS400 File Header Information ==--
// Name: Maja Velichkovich
// Email: mvelichkovic@wisc.edu
// Team: MB
// TA: Harit
// Lecturer: Florian Heimerl
// Notes to Grader: <optional extra notes>

/**
 * This is a test class used to check the functionality of the methods within HashTableMap.java
 * 
 * 
 * @author Maja Velichkovich
 */
import java.util.NoSuchElementException;

public class TestHashTable {
  /**
   * Tests that the HashTable.put() and HashTable.size() methods are functioning correctly.
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testPut() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>();
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // adds one pair to the hash table
    table.put("ab", 0.00);
    // checks if size is correct after adding a pair
    if (table.size() != 1) {
      test = false;
      System.out.println("Size method does not return correct number when size is 1.");
    }
    // checks if the key was added correctly
    if (!table.containsKey("ab")) {
      test = false;
      System.out.println("First key was not properly added.");
    }
    // adds a pair with the same index as the previous to the table
    table.put("ba", 1.00);
    // checks that the HashTable.size() method returns the correct number/element was added
    // correctly
    if (table.size() != 2) {
      test = false;
      System.out.println("Size method does not return correct number when adding a value to an index"
          + "that already contains a value.");
    }
    /**
     * Tries to add an already existing value to table and ensures that the HashTable.put() method
     * returns false
     */
    if (table.put("ba", 0.00)) {
      test = false;
      System.out.println(
          "Put method does not return false when a repeat" + " key is attempted to be added.");
    }
    /**
     * checks that the HashTable.size() method returns the correct number after trying to add a
     * repeat key.
     */
    if (table.size() != 2) {
      test = false;
      System.out.print("Size method does not return correct number when adding a value to an index"
          + "that already contains a value.");
    }
    // Ensures that HashTable.put() method returns false and does not add a null key.
    if (table.put(null, null)) {
      test = false;
      System.out.println(
          "Put method does not return false when a null" + " key is attempted to be added.");
    }
    return test;
  }

  /**
   * Tests that the HashTable.remove() method works correctly and updates the size
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testRemove() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>();
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // Adds 4 pairs to the table
    table.put("a", 1.00);
    table.put("b", 2.00);
    table.put("c", 3.00);
    table.put("d", 0.00);
    // checks that correct value is returned when a class is removed
    if (!table.remove("a").equals(1.00)) {
      test = false;
      System.out.println("Incorrect value was removed from the table");
    }
    // checks that the table's size updated correctly
    if (table.size() != 3) {
      test = false;
      System.out.print("Size method does not return correct number after a value was removed.");
    }
    // assures that the key is no longer in the table
    if (table.containsKey("a")) {
      test = false;
      System.out.print("The key was not removed properly.");
    }
    /**
     * checks that the HashTable.remove() method returns null when the key being sent to the method
     * does not exist
     */
    if (table.remove("a") != (null)) {
      test = false;
      System.out
          .print("HashTable.remove() method did not return null when trying to remove a key that "
              + "does not exist");
    }
    // assures that size did not change after trying to remove a key that doesn't exist
    if (table.size() != 3) {
      test = false;
      System.out.print("HashTable.size() method does not return correct number after trying to"
          + " remove a key that does not exist");
    }
    return test;
  }

  /**
   * Tests that the HashTable.clear() method works correctly and updates the size properly
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testClear() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>();
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // Adds 2 pairs to the table
    table.put("a", 1.00);
    table.put("b", 2.00);
    // clears the table
    table.clear();
    // checks that size is 0 after calling clear method
    if (table.size() != 0) {
      test = false;
      System.out.println("Size is not 0 after calling the HashTable.clear() method");
    }
    // Assures that all keys were correctly removed
    if (table.containsKey("a") || table.containsKey("b")) {
      test = false;
      System.out.println(
          "The keys were not successfully removed by calling the HashTable.clear()" + " method.");
    }
    return test;
  }

  /**
   * Tests that the HashTable.get() method works correctly
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testGet() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>();
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // Adds a pair to the table
    table.put("a", 1.00);
    Object val = table.get("a");
    // checks that the correct value was retrieved when calling HashTable.getClass().
    if (!val.equals(1.00)) {
      test = false;
      System.out.println("The wrong value was retrieved when calling HashTable.get()");
    }
    // checks that HashTable.get() throws an exception when passed a non-existing key
    try {
      table.get("b");
      // if preceding code is executed the NoSuchElementException was not thrown.
      test = false;
      System.out.println(
          "HashTable.get() did not throw NoSuchElementException when passed a non-existing key");
    } catch (NoSuchElementException e) {

    }
    // checks that HashTable.get() throws an exception when passed a null value
    try {
      table.get(null);
      // if preceding code is executed the NoSuchElementException was not thrown.
      test = false;
      System.out.println(
          "HashTable.get() does not throw NoSuchElementException when passed a null value");
    } catch (NoSuchElementException e) {

    }
    return test;
  }

  /**
   * Tests that the HashTable.containsKey() method works correctly
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testContainsKey() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>();
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // Adds 4 pairs to the table
    table.put("ab", 1.00);
    table.put("ba", 2.00);
    table.put("c", 3.00);
    table.put("d", 0.00);
    // checks that HashTable.containsKey() returns true when passed values that are in the table
    if (!table.containsKey("c") || !table.containsKey("d")) {
      test = false;
      System.out
          .println("HashTable.containsKey() method did not return true when passed values that"
              + " are in the table");
    }
    // checks that HashTable.containsKey() handles collisions properly
    if (!table.containsKey("ab") || !table.containsKey("ba")) {
      test = false;
      System.out.println("HashTable.containsKey() method doesn't handle collisions properly");
    }
    // checks that the HashTable.containsKey() method returns false when passed a string that isn't
    // in the table
    if (table.containsKey("ad")) {
      test = false;
      System.out.println("HashTable.containsKey() method returned true when passed a value that"
          + " is not in the table");
    }
    // checks that HashTable.containsKey() returns false when passed a null value
    if (table.containsKey(null)) {
      test = false;
      System.out.println("HashTable.containsKey() method returned true when passed a null value");
    }
    return test;
  }

  /**
   * Tests that the HashTable.resize() method works correctly
   * 
   * @return true when this test verifies a correct functionality, and false otherwise
   */
  public static boolean testResize() {
    // Create a new empty hash table
    HashTableMap<String, Double> table = new HashTableMap<String, Double>(5);
    boolean test = true; // initiates boolean that will be used to identify whether tests are passed
    // Adds 4 pairs to the table, while adding the 4th pair HashTable.resize() should be called
    table.put("a", 1.00);
    table.put("b", 2.00);
    table.put("c", 3.00);
    table.put("d", 4.00);
    // Adds a 5th and 6th pair to the table, if HashTable.resize() was not called 6th pair can't be
    // added
    table.put("e", 0.00);
    table.put("f", 0.00);
    // Assures that the table now has a size of 6
    if (table.size() != 6) {
      test = false;
      System.out.println("HashTable.resize() was not called or did not change table size properly");
    }
    return test;
  }

  public static void main(String[] args) {
    System.out.println(testResize());
    System.out.println(testContainsKey());
    System.out.println(testGet());
   // System.out.println(testClear());
    System.out.println(testRemove());
    System.out.println(testPut());

  }

}
